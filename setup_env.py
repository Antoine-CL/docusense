#!/usr/bin/env python3
"""
Environment setup script for DocuSense webhook deployment.
Helps gather and validate all required environment variables.
"""

import os
import json
from pathlib import Path

def load_existing_env():
    """Load existing environment variables from .env file if it exists."""
    env_file = Path(".env")
    env_vars = {}
    
    if env_file.exists():
        print("üìÑ Found existing .env file")
        with open(env_file, "r") as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith("#") and "=" in line:
                    key, value = line.split("=", 1)
                    env_vars[key.strip()] = value.strip().strip('"').strip("'")
    
    return env_vars

def get_env_var(name, description, current_value=None, required=True):
    """Get an environment variable with user input."""
    if current_value:
        prompt = f"{description}\nCurrent value: {current_value[:20]}{'...' if len(current_value) > 20 else ''}\nPress Enter to keep current value, or enter new value: "
        new_value = input(prompt).strip()
        return new_value if new_value else current_value
    else:
        while True:
            value = input(f"{description}: ").strip()
            if value or not required:
                return value
            print("This field is required. Please enter a value.")

def main():
    """Main setup function."""
    print("üîß DocuSense Environment Setup")
    print("=" * 50)
    print("This script will help you set up the required environment variables.")
    print()
    
    # Load existing values
    existing_env = load_existing_env()
    
    # Required environment variables
    env_vars = {}
    
    print("üîê Azure AD Configuration:")
    env_vars["TENANT_ID"] = get_env_var(
        "TENANT_ID",
        "Your Azure AD Tenant ID (found in Azure Portal > Azure Active Directory > Properties)",
        existing_env.get("TENANT_ID")
    )
    
    env_vars["CLIENT_ID"] = get_env_var(
        "CLIENT_ID", 
        "Your DocuSense-API App Registration Client ID",
        existing_env.get("CLIENT_ID")
    )
    
    env_vars["CLIENT_SECRET"] = get_env_var(
        "CLIENT_SECRET",
        "Your DocuSense-API App Registration Client Secret",
        existing_env.get("CLIENT_SECRET")
    )
    
    print("\nüîç Azure AI Search Configuration:")
    env_vars["AZURE_SEARCH_SERVICE_NAME"] = get_env_var(
        "AZURE_SEARCH_SERVICE_NAME",
        "Your Azure AI Search service name (without .search.windows.net)",
        existing_env.get("AZURE_SEARCH_SERVICE_NAME")
    )
    
    env_vars["AZURE_SEARCH_API_KEY"] = get_env_var(
        "AZURE_SEARCH_API_KEY",
        "Your Azure AI Search admin API key",
        existing_env.get("AZURE_SEARCH_API_KEY")
    )
    
    print("\nü§ñ Azure OpenAI Configuration:")
    env_vars["AZURE_OPENAI_ENDPOINT"] = get_env_var(
        "AZURE_OPENAI_ENDPOINT",
        "Your Azure OpenAI endpoint (e.g., https://your-resource.openai.azure.com/)",
        existing_env.get("AZURE_OPENAI_ENDPOINT")
    )
    
    env_vars["AZURE_OPENAI_API_KEY"] = get_env_var(
        "AZURE_OPENAI_API_KEY",
        "Your Azure OpenAI API key",
        existing_env.get("AZURE_OPENAI_API_KEY")
    )
    
    # Optional variables
    print("\n‚öôÔ∏è  Optional Configuration:")
    env_vars["AZURE_OPENAI_MODEL"] = get_env_var(
        "AZURE_OPENAI_MODEL",
        "Azure OpenAI embedding model name (default: text-embedding-ada-002)",
        existing_env.get("AZURE_OPENAI_MODEL", "text-embedding-ada-002"),
        required=False
    ) or "text-embedding-ada-002"
    
    env_vars["AZURE_SEARCH_INDEX"] = get_env_var(
        "AZURE_SEARCH_INDEX",
        "Azure AI Search index name (default: docusense-index)",
        existing_env.get("AZURE_SEARCH_INDEX", "docusense-index"),
        required=False
    ) or "docusense-index"
    
    # Save to .env file
    print("\nüíæ Saving configuration to .env file...")
    with open(".env", "w") as f:
        f.write("# DocuSense Environment Configuration\n")
        f.write("# Generated by setup_env.py\n\n")
        
        f.write("# Azure AD Configuration\n")
        f.write(f'TENANT_ID="{env_vars["TENANT_ID"]}"\n')
        f.write(f'CLIENT_ID="{env_vars["CLIENT_ID"]}"\n')
        f.write(f'CLIENT_SECRET="{env_vars["CLIENT_SECRET"]}"\n\n')
        
        f.write("# Azure AI Search Configuration\n")
        f.write(f'AZURE_SEARCH_SERVICE_NAME="{env_vars["AZURE_SEARCH_SERVICE_NAME"]}"\n')
        f.write(f'AZURE_SEARCH_API_KEY="{env_vars["AZURE_SEARCH_API_KEY"]}"\n')
        f.write(f'AZURE_SEARCH_INDEX="{env_vars["AZURE_SEARCH_INDEX"]}"\n\n')
        
        f.write("# Azure OpenAI Configuration\n")
        f.write(f'AZURE_OPENAI_ENDPOINT="{env_vars["AZURE_OPENAI_ENDPOINT"]}"\n')
        f.write(f'AZURE_OPENAI_API_KEY="{env_vars["AZURE_OPENAI_API_KEY"]}"\n')
        f.write(f'AZURE_OPENAI_MODEL="{env_vars["AZURE_OPENAI_MODEL"]}"\n')
    
    # Also save to JSON for easy loading
    with open("env_config.json", "w") as f:
        json.dump(env_vars, f, indent=2)
    
    print("‚úÖ Configuration saved to .env and env_config.json")
    print("\nüöÄ Next steps:")
    print("1. Run 'az login' to authenticate with Azure")
    print("2. Run 'python deploy_webhooks.py' to deploy the webhook system")
    print("\n‚ö†Ô∏è  Important: Keep your .env file secure and never commit it to version control!")

if __name__ == "__main__":
    main() 